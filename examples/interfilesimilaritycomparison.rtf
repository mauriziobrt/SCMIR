{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf320
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red0\green0\blue191;
\red0\green115\blue0;\red96\green96\blue96;}
\deftab560
\pard\pardeftab560\ql\qnatural

\f0\fs18 \cf2 //Demonstrates getting an overall file comparison score\cf3 \
\
\
\cf2 //frame rate will be about 86Hz\cf3 \
\cf4 SCMIR\cf3 .setFrameHop(512); \
\
\
\
\cf2 //trying naively to match up all file pairs via similarity matrix \cf3 \
\
(  \
\cf4 var\cf3  featurelist = [[\cf4 MFCC\cf3 , 10],[\cf4 Loudness\cf3 ],[\cf4 SpecCentroid\cf3 ],[\cf4 SpecPcile\cf3 , 0.95],[\cf4 SpecPcile\cf3 , 0.8],[\cf4 SpecFlatness\cf3 ],[\cf4 FFTCrest\cf3 ],[\cf4 FFTCrest\cf3 , 0, 2000], [\cf4 FFTCrest\cf3 , 2000, 10000],[\cf4 FFTSpread\cf3 ],[\cf4 FFTSlope\cf3 ],[\cf4 SensoryDissonance\cf3 ],[\cf4 Onsets\cf3 ,\cf5 \\rcomplex\cf3 ]];    \
  \
\cf4 var\cf3  files = [\cf6 "/data/audio/mirdata/pixiesivebeentired.wav"\cf3 ,\cf6 "/data/audio/mirdata/Yellow Submarine.wav"\cf3 ];   \
  \
\cf4 var\cf3  comparisonmatrix;   \
\cf4 var\cf3  audioanalysis;   \
\
\{  \
audioanalysis = files.collect\{\cf4 |filename,i|\cf3 	   \
	  \
	e = \cf4 SCMIRAudioFile\cf3 (filename,featurelist);  \
	e.extractFeatures();  \
	e  \
\};	  \
  \
\cf2 //check all pairings	  \cf3 \
  \
comparisonmatrix = \cf4 Array\cf3 .fill(files.size-1,\{\cf4 |i|\cf3    \
	\cf4 var\cf3  comparisons = \cf4 List\cf3 [];   \
	\cf4 var\cf3  audio1 = audioanalysis[i];   \
	  \
	if((i+1) < (files.size)	) \{ \
		for(i+1,files.size-1,\{\cf4 |j,count|\cf3   \
			  \
			\cf4 var\cf3  audio2 = audioanalysis[j];	  \
			  \
			m = audio1.similarityMatrix(40,0,other:audio2);  \
			  \
			comparisons.add(m);  \
		\}); 	  \
	\}; \
	  \
	comparisons	  \
\}); 	  \
  \
  \
c = comparisonmatrix;  \
  \
\}.fork; \
)\
\
\
c\
\
d= c[0][0].dtw(40) \cf2 //leeway of 40 either side, 1 frame is around 0.5 seconds, so allows up to  20 seconds ahead or behind \cf3 \
				 \
\
\cf2 //use DTW, get best path match score:\cf3 \
\
d[0]; \cf2 //match score\cf3 \
\
c[0][0].plot(2,2, path:d)	\cf2 //show path on the similarity matrix plot\cf3 \
\
\
\
\
\
\
\
\cf2 //this next calculation takes a while; could speed up by reducing search area\cf3 \
\
\cf2 // by testing one file against another, one ten second block at a time, finding closest block in other file; trying to get overall DTW based comparison score\cf3 \
\cf2 //in general need normalisation by duration of audio1.duration of all distances between audio1 and others\cf3 \
(  \
\cf4 var\cf3  featurelist = [[\cf4 MFCC\cf3 , 10],[\cf4 Loudness\cf3 ],[\cf4 SpecCentroid\cf3 ],[\cf4 SpecPcile\cf3 , 0.95],[\cf4 SpecPcile\cf3 , 0.8],[\cf4 SpecFlatness\cf3 ],[\cf4 FFTCrest\cf3 ],[\cf4 FFTCrest\cf3 , 0, 2000], [\cf4 FFTCrest\cf3 , 2000, 10000],[\cf4 FFTSpread\cf3 ],[\cf4 FFTSlope\cf3 ],[\cf4 SensoryDissonance\cf3 ],[\cf4 Onsets\cf3 ,\cf5 \\rcomplex\cf3 ]];     \
  \
\cf4 var\cf3  files = [\cf6 "/data/audio/mirdata/pixiesivebeentired.wav"\cf3 ,\cf6 "/data/audio/mirdata/Yellow Submarine.wav"\cf3 ,\cf6 "/data/audio/mirdata/synthpopexclude/buggles/10 Technopop.wav"\cf3 ];    \
  \
\cf4 var\cf3  comparisonmatrix;    \
\cf4 var\cf3  audioanalysis;    \
\cf4 var\cf3  score= 0.0;    \
\cf4 var\cf3  numfit;    \
\cf4 var\cf3  temp;    \
\cf4 var\cf3  segmentsize= 10.0;   \cf2 //Short Term Memory size\cf3 \
  \
\{   \
	  \
	audioanalysis = files.collect\{\cf4 |filename,i|\cf3 	    \
		  \
		e = \cf4 SCMIRAudioFile\cf3 (filename,featurelist);   \
		  \
		e.extractFeatures();   \
		  \
	\};	   \
	  \
	  \
	numfit= audioanalysis.collect\{\cf4 |val|\cf3  val.duration\};   \
	  \
	numfit = (numfit/segmentsize).asInteger;  \
	  \
	numfit.postln;  \cf2 //number of segments within each  \cf3 \
	  \
	\cf2 //check all pairings	   \cf3 \
	  \
	comparisonmatrix = \cf4 Array\cf3 .fill(files.size-1,\{\cf4 |i|\cf3     \
		  \
		\cf4 var\cf3  comparisons = \cf4 List\cf3 [];    \
		\cf4 var\cf3  audio1 = audioanalysis[i];    \
		\cf4 var\cf3  numfit1 = numfit[i];   \
		  \
		if((i+1) < (files.size)	) \{  \
			for(i+1,files.size-1,\{\cf4 |j,count|\cf3    \
				  \
				\cf4 var\cf3  audio2 = audioanalysis[j];	   \
				\cf4 var\cf3  numfit2 = numfit[j];   \
				  \
				(\cf6 "comparing"\cf3 +i+\cf6 "to"\cf3 +j).postln;   \
				  \
				score= 0.0;	  \
				  \
				numfit1.do\{\cf4 |segment1|\cf3    \
					  \
					\cf4 var\cf3  minval = 999999999999.9;    \
					\cf2 //var minindex=0;    \cf3 \
					\cf4 var\cf3  excerpt1,excerpt2,matrix;   \
					  \
					[\cf5 \\segment1\cf3 , segment1].postln;    \
					  \
					excerpt1 = \cf4 SCMIRAudioFile\cf3 .newFromRange(audio1,segment1*segmentsize,(segment1+1)*segmentsize);    \
					  \
					numfit2.do\{\cf4 |segment2|\cf3     \
						  \
						[\cf5 \\segment2\cf3 , segment2].postln;	   \
						  \
						excerpt2 = \cf4 SCMIRAudioFile\cf3 .newFromRange(audio2,segment2*segmentsize,(segment2+1)*segmentsize);    \
						  \
						0.01.wait;   \
						  \
						matrix = excerpt1.similarityMatrix(2, 2, other:excerpt2);    \
						  \
						0.01.wait;   \
						  \
						\cf2 //actually 6 either side in original frame terms    \cf3 \
						d = matrix.dtw(3);   \
						  \
						\cf2 //d.postln;  \cf3 \
						  \
						if(d[0]<minval) \{   \
							  \
							minval = d[0];    \
							\cf2 //minindex = j;    \cf3 \
							  \
						\};   \
						  \
					\};   \
					  \
					score = score + minval;    \
					  \
					\cf2 //score.postln;   \cf3 \
				\};    \
				  \
				comparisons.add(score/numfit1); \cf2 // /(audio1.duration) //normalize scores relative to audio1 currently being compared to others, to get a similarity per block\cf3 \
			\}); 	   \
		\};  \
		  \
		comparisons	   \
	\}); 	   \
	  \
	  \
	c = comparisonmatrix;   \
	d = numfit; \
	  \
\}.fork(\cf4 SystemClock\cf3 , stackSize:16384); \cf2 //wait for me to finish   \cf3 \
  \
  \
 \
)\
\
\
\
c\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 //[ List[ 155.33421660256, 158.85525181972 ], List[ 122.95233852859 ] ]\cf3 \
\pard\pardeftab560\ql\qnatural
\cf3 \
\
d\
\cf2 //[ 18, 16, 23 ]\cf3 \
\
\
c.flatten/[18,18,16]\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 //[ 8.6296787001423, 8.8252917677624, 7.6845211580367 ]\cf3 \
\pard\pardeftab560\ql\qnatural
\cf2 //closest is B to C, second A to B, last A to C\cf3 \
\
}