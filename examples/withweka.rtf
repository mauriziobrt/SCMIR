{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red191\green0\blue0;
\red96\green96\blue96;\red96\green96\blue96;\red0\green0\blue191;\red0\green115\blue0;}
\deftab560
\pard\pardeftab560\ql\qnatural

\f0\fs18 \cf2 //for weka command line help, see \cf0 \
\cf2 //http://weka.wikispaces.com/How+to+run+WEKA+schemes+from+commandline\cf0 \
\cf2 //http://weka.wikispaces.com/Primer\cf0 \
\cf2 //http://weka.wikispaces.com/Using+cluster+algorithms\cf0 \
\
\
(\cf3 \
\pard\pardeftab560\ql\qnatural
\cf4 //change for your machine \cf3 \
~wekapath = \cf5 "/Applications/weka-3-6-1/"\cf3 ; \
\
~jarpath = ~wekapath ++ \cf5 "weka.jar"\cf3 ; \
\
\cf4 //SuperCollider application folder location\cf3 \
~templocation = \cf5 "/tmp/"\cf3 ; \cf4 // "/data/gitprojects/supercollider/common/build/";\cf3 \
\
~callstart = \cf5 "java -classpath"\cf3 + ~jarpath; \
\
~arffname = ~templocation++\cf5 "testfile.arff"\cf3 ; \
\
\cf0 )\
\
\
\pard\pardeftab560\ql\qnatural
\cf2 //test can call weka; ask for help. you may need to view messages in the Console app on OS X\cf0 \
(~callstart+\cf6 "weka.classifiers.trees.J48 -h"\cf0 ).unixCmd\
\
\
\cf2 //analyze file and create ARFF output\cf0 \
\
\
f = \cf7 SCMIRAudioFile\cf0 (\cf6 "sounds/a11wlk01.wav"\cf0 , [[\cf7 MFCC\cf0 , 13], [\cf7 Chromagram\cf0 , 12]]);\
\
\{f.extractFeatures(); \}.fork(\cf7 SystemClock\cf0 ); \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 f.exportARFF(~arffname); \
\
\pard\pardeftab560\ql\qnatural
\cf0 \
\pard\pardeftab560\ql\qnatural
\cf2 //validate ARFF\cf0 \
(~callstart+\cf6 "weka.core.Instances"\cf0 +~arffname).unixCmd\
\
\
\
\cf2 //train with basic classifiers; will be perfect here, since no class to predict\cf0 \
(~callstart+\cf6 "weka.classifiers.rules.ZeroR -t"\cf0 +~arffname).unixCmd\
\
\cf2 //can't handle numeric class, nothing to predict\cf0 \
(~callstart+\cf6 "weka.classifiers.trees.J48 -t"\cf0 +~arffname).unixCmd\
\
\cf2 //test on existing data set from weka package\cf0 \
(~callstart+\cf6 "weka.classifiers.trees.J48 -t"\cf0 +(~wekapath++\cf6 "data/soybean.arff"\cf0 )).unixCmd\
\pard\pardeftab720\sl380\ql\qnatural
\cf0 \
\pard\pardeftab560\ql\qnatural
\cf2 //-d save model, -l load model\cf0 \
(~callstart+\cf6 "weka.classifiers.bayes.NaiveBayes -t"\cf0 +(~wekapath++\cf6 "data/soybean.arff"\cf0 )+\cf6 "-d bayes.wekamodel"\cf0 ).unixCmd\
\
\cf2 //test using saved model\cf0 \
(~callstart+\cf6 "weka.classifiers.bayes.NaiveBayes -T"\cf0 +(~wekapath++\cf6 "data/soybean.arff"\cf0 )+\cf6 "-l bayes.wekamodel"\cf0 ).unixCmd\
\
\
\
\
\
\cf2 //run clustering on instances\cf0 \
\
(~callstart+\cf6 "weka.clusterers.SimpleKMeans -h"\cf0 ).unixCmd\
\
\cf2 //find 5 clusters -N option is for number of desired clusters\cf0 \
(~callstart+\cf6 "weka.clusterers.SimpleKMeans -N 5 -t"\cf0 +~arffname).unixCmd\
\
\
\cf2 //find 10 clusters and save\cf0 \
(~callstart+\cf6 "weka.clusterers.SimpleKMeans -N 10 -t"\cf0 +~arffname+\cf6 "-d kmeans.wekamodel"\cf0 ).unixCmd\
\
\
\cf2 //use cluster model on novel input\cf0 \
\
\cf2 //MUST have same features extracted in same order\cf0 \
g = \cf7 SCMIRAudioFile\cf0 (\cf6 "sounds/yourmum.wav"\cf0 , [[\cf7 MFCC\cf0 , 13], [\cf7 Chromagram\cf0 , 12]]);\
\
\{g.extractFeatures(); \}.fork(\cf7 SystemClock\cf0 ); \
\
~arffname2 = ~templocation++\cf6 "testfile2.arff"\cf0 ; \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 g.exportARFF(~arffname2); \
\pard\pardeftab560\ql\qnatural
\cf0 \
(~callstart+\cf6 "weka.clusterers.SimpleKMeans -T"\cf0 +~arffname2+\cf6 "-l kmeans.wekamodel"\cf0 ).unixCmd\
\
\
\
\pard\pardeftab560\ql\qnatural
\cf2 //next challenge; how to get a specific instance clustered and get data back into SC; via piped output from weka, or at least scan of text file out?\cf0 \
(~callstart+\cf6 "weka.clusterers.SimpleKMeans -T"\cf0 +~arffname2+\cf6 "-p 0 -l kmeans.wekamodel"\cf0 ).unixCmd\
\
\cf2 //using Pipe to get data a line at a time\cf0 \
(\
\cf7 var\cf0  p, l;\
\cf7 var\cf0  count = 0; \
p = \cf7 Pipe\cf0 .new((~callstart+\cf6 "weka.clusterers.SimpleKMeans -T"\cf0 +~arffname2+\cf6 "-p 0 -l kmeans.wekamodel"\cf0 ), \cf6 "r"\cf0 );						\cf2 // list directory contents in long format\cf0 \
l = p.getLine;								\cf2 // get the first line\cf0 \
while(\{l.notNil\}, \{\
	\cf2 //[count,l].postln; \cf0 \
	if (l.size>0,\{(l.split($  )[1]).postln;\}); \cf2 //post cluster assignment decision\cf0 \
	count = count +1; \
	l = p.getLine; \
	\});	\cf2 // post until l = nil\cf0 \
p.close;										\cf2 // close the pipe to avoid that nasty buildup\cf0 \
)\
\
\cf2 //if getting a single cluster result, just put one feature instance in the output file. \cf0 \
\
\cf2 //another way may be to write an OSC based java program making weka calls, or link in to Rebecca Fiebrink's wekinator (though SC's feature extraction required)\cf0 \
\
\
\
\
\cf2 //classify onset-cued segments \cf0 \
g = \cf7 SCMIRAudioFile\cf0 (\cf6 "/data/audio/mirdata/pixiesivebeentired.wav"\cf0 , [[\cf7 MFCC\cf0 , 20]]);\
\
(\
\{\
g.extractFeatures(); \
g.extractOnsets();\
\}.fork(\cf7 SystemClock\cf0 );\
) \
\
(\
g.gatherFeaturesByOnsets;\
\
~arffname3 = ~templocation++\cf6 "testfile3.arff"\cf0 ; \
\
\cf2 //output onset collected features as instances in an ARFF file\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf0 g.exportARFF(~arffname3); \
\pard\pardeftab560\ql\qnatural
\cf0 )\
\
\pard\pardeftab560\ql\qnatural
\cf2 //train clusterer, 3 clusters\cf0 \
(~callstart+\cf6 "weka.clusterers.SimpleKMeans -N 3 -t"\cf0 +~arffname3+\cf6 "-d kmeansonsets.wekamodel"\cf0 ).unixCmd\
\
\cf2 //could now compare on another file, or just use these clusters in selective resynthesis, etc\cf0 \
\
(\
\cf7 var\cf0  p, l;\
\cf7 var\cf0  count = 0; \
\cf7 var\cf0  onsetclassification = \cf7 List\cf0 []; \
\
p = \cf7 Pipe\cf0 .new((~callstart+\cf6 "weka.clusterers.SimpleKMeans -T"\cf0 +~arffname3+\cf6 "-p 0 -l kmeansonsets.wekamodel"\cf0 ), \cf6 "r"\cf0 );						\cf2 // list directory contents in long format\cf0 \
l = p.getLine;								\cf2 // get the first line\cf0 \
while(\{l.notNil\}, \{\
	\cf2 //[count,l].postln; \cf0 \
	if (l.size>0,\{onsetclassification.add( (l.split($  )[1]).asInteger);\}); \cf2 //post cluster assignment decision\cf0 \
	count = count +1; \
	l = p.getLine; \
	\});	\cf2 // post until l = nil\cf0 \
p.close;										\cf2 // close the pipe to avoid that nasty buildup\cf0 \
~solution = onsetclassification.postcs\
)\
\
\
s.boot;\
\
(\
b = \cf7 Buffer\cf0 .read(s,\cf6 "/data/audio/mirdata/pixiesivebeentired.wav"\cf0 ); \cf2 //load whole thing for ease of use\cf0 \
\
\cf7 SynthDef\cf0 (\cf8 \\scmirplaybacksegment\cf0 ,\{\cf7 arg\cf0  bufnum, pos= 0.0, duration=1.0;\
	\
	\cf7 Out\cf0 .ar(0, \cf7 PlayBuf\cf0 .ar(2,bufnum,\cf7 BufRateScale\cf0 .ir(bufnum),startPos:pos*\cf7 BufSampleRate\cf0 .ir(bufnum))*\cf7 EnvGen\cf0 .ar(\cf7 Env\cf0 ([0,1,1,0],[0.01,duration-0.02,0.01]),doneAction:2)); \
	\
\}).add\
)\
\
\cf2 //play back only those events tagged in cluster 0; misses out chorus parts, mainly verse! \cf0 \
(\
\{\
~solution.do\{\cf7 |cluster, i|\cf0  \
	\cf7 var\cf0  onsettime, endtime, duration; \
	\
	if (cluster==0)\{ \
	\
	onsettime = g.onsetdata[i]; \
	\
	endtime = if(i<(g.numframes-1))\{g.onsetdata[i+1]-0.001\}\{g.duration\}; \
	\
	duration = (endtime-onsettime).max(0.0);\
	\
	\cf7 Synth\cf0 (\cf8 \\scmirplaybacksegment\cf0 ,[\cf8 \\pos\cf0 ,onsettime,\cf8 \\duration\cf0 ,duration]);\
	\
	duration.wait; \
	\
	\cf2 //0.1.wait; //short silence between each segment \cf0 \
	\
	\}; \}\
\
\}.fork;\
)\
\
\
\
\
}